<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junthy&#39;s Blog</title>
  
  <subtitle>To Be A Better Man</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://81.68.66.74/"/>
  <updated>2019-10-22T07:40:08.127Z</updated>
  <id>http://81.68.66.74/</id>
  
  <author>
    <name>Junthy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 74. 搜索二维矩阵</title>
    <link href="http://81.68.66.74/2019/10/22/LeetCode-74-search-a-2d-matrix/"/>
    <id>http://81.68.66.74/2019/10/22/LeetCode-74-search-a-2d-matrix/</id>
    <published>2019-10-22T00:00:00.000Z</published>
    <updated>2019-10-22T07:40:08.127Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目描述：编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：&lt;/p&gt;
&lt;p&gt;每行中的整数从左到右按升序排列。&lt;br&gt;每行的第一个整数大于前一行的最后一个整数。&lt;br&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入:&lt;br&gt;mat
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://81.68.66.74/categories/LeetCode/"/>
    
    
      <category term="二分查找" scheme="http://81.68.66.74/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  34. 在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="http://81.68.66.74/2019/10/22/LeetCode-34-find-first-and-last-position-of-element-in-sorted-array/"/>
    <id>http://81.68.66.74/2019/10/22/LeetCode-34-find-first-and-last-position-of-element-in-sorted-array/</id>
    <published>2019-10-22T00:00:00.000Z</published>
    <updated>2019-10-22T06:27:48.843Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目描述：给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。&lt;/p&gt;
&lt;p&gt;你的算法时间复杂度必须是 O(log n) 级别。&lt;/p&gt;
&lt;p&gt;如果数组中不存在目标值，返回 [-1, -
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://81.68.66.74/categories/LeetCode/"/>
    
    
      <category term="二分查找" scheme="http://81.68.66.74/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>二分查找算法模板</title>
    <link href="http://81.68.66.74/2019/10/21/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    <id>http://81.68.66.74/2019/10/21/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-10-21T00:00:00.000Z</published>
    <updated>2019-10-21T11:58:37.558Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;95%的二分查找问题都可以通过两段性性质来解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;两段性性质指的是：能够将问题所给的区间通过判断分成两段，假设该判断函数为check，使得两段区域中一段满足check判断，另一段不满足。&lt;/s
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://81.68.66.74/categories/LeetCode/"/>
    
    
      <category term="二分查找" scheme="http://81.68.66.74/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 35. 搜索插入位置</title>
    <link href="http://81.68.66.74/2019/10/21/LeetCode-35-search-insert-position/"/>
    <id>http://81.68.66.74/2019/10/21/LeetCode-35-search-insert-position/</id>
    <published>2019-10-21T00:00:00.000Z</published>
    <updated>2019-10-21T11:59:37.375Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目描述：给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。&lt;/p&gt;
&lt;p&gt;你可以假设数组中无重复元素。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: [1,3,5,6], 5
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://81.68.66.74/categories/LeetCode/"/>
    
    
      <category term="二分查找" scheme="http://81.68.66.74/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode  69. x的平方和</title>
    <link href="http://81.68.66.74/2019/10/21/LeetCode-69-sqrtx/"/>
    <id>http://81.68.66.74/2019/10/21/LeetCode-69-sqrtx/</id>
    <published>2019-10-21T00:00:00.000Z</published>
    <updated>2019-10-21T11:59:38.775Z</updated>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目描述：实现 int sqrt(int x) 函数。&lt;/p&gt;
&lt;p&gt;计算并返回 x 的平方根，其中 x 是非负整数。&lt;/p&gt;
&lt;p&gt;由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: 4&lt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://81.68.66.74/categories/LeetCode/"/>
    
    
      <category term="二分查找" scheme="http://81.68.66.74/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://81.68.66.74/2019/08/29/%E6%B5%A6%E5%8F%91%E5%92%8C%E7%BE%8E%E5%9B%A2%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://81.68.66.74/2019/08/29/%E6%B5%A6%E5%8F%91%E5%92%8C%E7%BE%8E%E5%9B%A2%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</id>
    <published>2019-08-29T15:18:31.714Z</published>
    <updated>2019-08-30T06:53:32.677Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;今天的两场面试-浦发和美团&quot;&gt;&lt;a href=&quot;#今天的两场面试-浦发和美团&quot; class=&quot;headerlink&quot; title=&quot;今天的两场面试-浦发和美团&quot;&gt;&lt;/a&gt;今天的两场面试-浦发和美团&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;浦发：早上八点半  第一场
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HDFS读写原理</title>
    <link href="http://81.68.66.74/2019/08/25/Hadoop-HDFS%E8%AF%BB%E5%86%99%E5%8E%9F%E7%90%86/"/>
    <id>http://81.68.66.74/2019/08/25/Hadoop-HDFS%E8%AF%BB%E5%86%99%E5%8E%9F%E7%90%86/</id>
    <published>2019-08-25T00:00:00.000Z</published>
    <updated>2019-08-25T04:04:20.417Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hadoop-是什么&quot;&gt;&lt;a href=&quot;#Hadoop-是什么&quot; class=&quot;headerlink&quot; title=&quot;Hadoop 是什么&quot;&gt;&lt;/a&gt;Hadoop 是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hadoop 是一个开源的大数据框架同时也是一个分
      
    
    </summary>
    
    
      <category term="Hadoop" scheme="http://81.68.66.74/categories/Hadoop/"/>
    
    
      <category term="HDFS" scheme="http://81.68.66.74/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>基本排序算法（Java）</title>
    <link href="http://81.68.66.74/2019/04/13/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-Java/"/>
    <id>http://81.68.66.74/2019/04/13/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-Java/</id>
    <published>2019-04-13T00:00:00.000Z</published>
    <updated>2019-04-13T13:52:35.405Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本排序算法-Java&quot;&gt;&lt;a href=&quot;#基本排序算法-Java&quot; class=&quot;headerlink&quot; title=&quot;基本排序算法 (Java)&quot;&gt;&lt;/a&gt;基本排序算法 (Java)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;经过几次笔试，发现自己的Java基础有些薄弱，基
      
    
    </summary>
    
    
      <category term="Java" scheme="http://81.68.66.74/categories/Java/"/>
    
    
      <category term="基本排序算法" scheme="http://81.68.66.74/tags/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>阿里面试总结</title>
    <link href="http://81.68.66.74/2019/03/21/%E9%98%BF%E9%87%8C%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95/"/>
    <id>http://81.68.66.74/2019/03/21/%E9%98%BF%E9%87%8C%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95/</id>
    <published>2019-03-21T00:00:00.000Z</published>
    <updated>2019-03-21T11:41:39.344Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;阿里实习电话面试总结&quot;&gt;&lt;a href=&quot;#阿里实习电话面试总结&quot; class=&quot;headerlink&quot; title=&quot;阿里实习电话面试总结&quot;&gt;&lt;/a&gt;阿里实习电话面试总结&lt;/h2&gt;&lt;p&gt;这次面试主要问的是项目中Hadoop相关的知识，包括MR程序等等。后来还问了
      
    
    </summary>
    
    
      <category term="面试" scheme="http://81.68.66.74/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>《Spark大数据处理》- Spark原理</title>
    <link href="http://81.68.66.74/2019/03/10/%E3%80%8ASpark%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E3%80%8B-%20Spark%E5%8E%9F%E7%90%86/"/>
    <id>http://81.68.66.74/2019/03/10/%E3%80%8ASpark%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E3%80%8B-%20Spark%E5%8E%9F%E7%90%86/</id>
    <published>2019-03-10T00:00:00.000Z</published>
    <updated>2019-03-10T06:55:28.568Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/Spark原理.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Spark" scheme="http://81.68.66.74/categories/Spark/"/>
    
    
      <category term="Spark原理" scheme="http://81.68.66.74/tags/Spark%E5%8E%9F%E7%90%86/"/>
    
      <category term="读书笔记" scheme="http://81.68.66.74/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java链表基本操作和Java.util.ArrayList</title>
    <link href="http://81.68.66.74/2019/02/26/Java%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://81.68.66.74/2019/02/26/Java%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2019-02-26T00:00:00.000Z</published>
    <updated>2019-03-10T06:55:25.641Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天做了一道《剑指offer》上的一道编程题“从尾到头打印链表”，具体要求如下：&lt;br&gt;&lt;strong&gt;输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。&lt;/strong&gt;&lt;br&gt;一开始我想的是通过两次遍历链表，第一次遍历得到链表元素的个数count。然后定义
      
    
    </summary>
    
    
      <category term="Java" scheme="http://81.68.66.74/categories/Java/"/>
    
    
      <category term="Java链表" scheme="http://81.68.66.74/tags/Java%E9%93%BE%E8%A1%A8/"/>
    
      <category term="ArrayList" scheme="http://81.68.66.74/tags/ArrayList/"/>
    
      <category term="剑指offer" scheme="http://81.68.66.74/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>Java.util.Arrays 常用方法</title>
    <link href="http://81.68.66.74/2019/02/13/Java.util.Arrays%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://81.68.66.74/2019/02/13/Java.util.Arrays%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2019-02-13T00:00:00.000Z</published>
    <updated>2019-03-10T06:55:27.156Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Array-简介&quot;&gt;&lt;a href=&quot;#Array-简介&quot; class=&quot;headerlink&quot; title=&quot;Array 简介&quot;&gt;&lt;/a&gt;Array 简介&lt;/h2&gt;&lt;p&gt;java.util.Arrays 类能够方便地对数组进行操作，它所提供的所有方法都是静态的。
      
    
    </summary>
    
    
      <category term="Java" scheme="http://81.68.66.74/categories/Java/"/>
    
    
      <category term="Arrays" scheme="http://81.68.66.74/tags/Arrays/"/>
    
  </entry>
  
</feed>
